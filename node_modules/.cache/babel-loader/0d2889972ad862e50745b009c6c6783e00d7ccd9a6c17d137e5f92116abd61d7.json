{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectControlInfo } from '../../control/control-slice';\nimport { selectOpeningInfo, setInside, setTitle, setJiraId, setStartTime, setAdmins, setOpeningDescription } from '../opening-slice';\nimport { sortTg } from '../../../static/helpers/var';\nimport { useCopyOpening } from './use-copy-opening';\nimport { useCopyBot } from './use-copy-bot';\nexport const useOpening = () => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    qualities,\n    stand,\n    tg,\n    priority,\n    effect\n  } = useSelector(store => selectControlInfo(store).controls);\n  const {\n    isInside,\n    openingTitle,\n    jiraId,\n    startTime,\n    systemAdmins,\n    openingDescription\n  } = useSelector(store => selectOpeningInfo(store).data);\n  const {\n    copySummary\n  } = useCopyOpening(qualities, stand, tg, priority, effect, isInside, openingTitle, jiraId, startTime, systemAdmins, openingDescription);\n  const {\n    copyBot\n  } = useCopyBot(stand, openingTitle, startTime, openingDescription);\n  const [startDate, setStartDate] = useState(new Date());\n  const [isWarning, setWarning] = useState(false);\n  const [isPrimary, setPrimary] = useState(false);\n  const handelInside = () => {\n    dispatch(setInside());\n  };\n  const onWriteInput = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    if (name === 'problem') dispatch(setTitle(value));\n    if (name === 'ops') {\n      if (value.length < 6) setPrimary(false);\n      if (value.length === 6) {\n        setWarning(false);\n        setPrimary(true);\n      }\n      if (value === '' || Number(value) && value.length < 7) dispatch(setJiraId(value));\n    }\n    if (name === 'admins') dispatch(setAdmins(value));\n    if (name === 'description') dispatch(setOpeningDescription(value));\n  };\n  useEffect(() => {\n    if (startDate) dispatch(setStartTime(startDate.toString()));\n  }, [startDate]);\n  return {\n    copySummary,\n    copyBot,\n    handelInside,\n    onWriteInput,\n    isPrimary,\n    stand,\n    qualities,\n    tg: sortTg(tg),\n    priority,\n    effect,\n    isInside,\n    openingTitle,\n    jiraId,\n    systemAdmins,\n    openingDescription,\n    startDate,\n    setStartDate,\n    isWarning,\n    setWarning\n  };\n};\n_s(useOpening, \"CLvQxk+k6hEQ0uNJ8mX1O71sc44=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useCopyOpening, useCopyBot];\n});","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","selectControlInfo","selectOpeningInfo","setInside","setTitle","setJiraId","setStartTime","setAdmins","setOpeningDescription","sortTg","useCopyOpening","useCopyBot","useOpening","_s","dispatch","qualities","stand","tg","priority","effect","store","controls","isInside","openingTitle","jiraId","startTime","systemAdmins","openingDescription","data","copySummary","copyBot","startDate","setStartDate","Date","isWarning","setWarning","isPrimary","setPrimary","handelInside","onWriteInput","event","name","value","target","length","Number","toString"],"sources":["/Users/admin/developing/Temp-March-31/src/features/opening/hooks/use-opening.js"],"sourcesContent":["import {useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {selectControlInfo} from '../../control/control-slice'\nimport {selectOpeningInfo, setInside, setTitle, setJiraId, setStartTime, setAdmins, setOpeningDescription} from '../opening-slice'\n\nimport {sortTg} from '../../../static/helpers/var'\nimport {useCopyOpening} from './use-copy-opening'\nimport {useCopyBot} from './use-copy-bot'\n\nexport const useOpening = () => {\n    const dispatch = useDispatch()\n    const {qualities, stand, tg, priority, effect} = useSelector(store => selectControlInfo(store).controls)\n    const {isInside, openingTitle, jiraId, startTime, systemAdmins, openingDescription} = useSelector(store => selectOpeningInfo(store).data)\n    const {copySummary} = useCopyOpening(qualities, stand, tg, priority, effect, isInside, openingTitle, jiraId, startTime, systemAdmins, openingDescription)\n    const {copyBot} = useCopyBot(stand, openingTitle, startTime, openingDescription)\n    const [startDate, setStartDate] = useState(new Date())\n    const [isWarning, setWarning] = useState(false)\n    const [isPrimary, setPrimary] = useState(false)\n\n    const handelInside = () => {\n        dispatch(setInside())\n    }\n\n    const onWriteInput = (event) => {\n        const {name, value} = event.target\n        if (name === 'problem') dispatch(setTitle(value))\n\n        if (name === 'ops') {\n            if (value.length < 6) setPrimary(false)\n            if (value.length === 6) {\n                setWarning(false)\n                setPrimary(true)\n            }\n\n            if (value === '' || (Number(value) && value.length < 7)) dispatch(setJiraId(value))\n        }\n\n        if (name === 'admins') dispatch(setAdmins(value))\n        if (name === 'description') dispatch(setOpeningDescription(value))\n    }\n\n    useEffect(() => {\n        if (startDate) dispatch(setStartTime(startDate.toString()))\n    }, [startDate])\n\n    return {\n        copySummary,\n        copyBot,\n        handelInside,\n        onWriteInput,\n\n        isPrimary,\n\n        stand,\n        qualities,\n        tg: sortTg(tg),\n        priority,\n        effect,\n\n        isInside,\n        openingTitle,\n        jiraId,\n        systemAdmins,\n        openingDescription,\n\n        startDate,\n        setStartDate,\n\n        isWarning,\n        setWarning,\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}